{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","width","FormComponent","props","classes","useState","zipCode","setZipCode","className","onSubmit","e","preventDefault","console","log","getCoordinates","autoComplete","TextField","id","label","type","value","onChange","target","InputLabelProps","shrink","variant","Button","color","mapboxgl","accessToken","process","App","getMap","map","Map","container","mapContainer","style","center","state","lng","lat","zoom","on","setState","getCenter","toFixed","getZoom","showFullScreen","classList","toggle","fetch","method","headers","then","response","json","data","city","catch","error","getCityInfo","res","err","this","ref","el","icon","faExpand","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bd06d85b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\n\r\nexport default function FormComponent(props) {\r\n    const classes = useStyles();\r\n    const [zipCode, setZipCode] = useState(\"\");\r\n    \r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        console.log(zipCode)\r\n        props.getCoordinates(zipCode)\r\n    }\r\n\r\n  return (\r\n      <div className=\"formContainer\">\r\n        <form \r\n            onSubmit={submitForm}\r\n            className={classes.root} \r\n            autoComplete=\"off\">\r\n            <TextField \r\n            id=\"outlined-number\"\r\n            label=\"Zip Code\"\r\n            type=\"zipcode\"\r\n            value={zipCode}\r\n            onChange={e => setZipCode(e.target.value)}\r\n            InputLabelProps={{\r\n                shrink: true,\r\n            }}\r\n            variant=\"outlined\"\r\n            />\r\n            <div className=\"buttonHolder\">\r\n                <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\r\n                    Find on Map\r\n                </Button>\r\n            </div>\r\n        </form>\r\n      </div>\r\n  );\r\n}","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport FormComponent from './components/Form';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExpand } from '@fortawesome/free-solid-svg-icons'\nimport './App.scss';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_KEY;\n\nexport default class App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        lng: -122.34, \n        lat: 47.61,\n        zoom: 10,\n        city: '',\n        state: '',\n      }\n    }\n\n    getMap = () => {\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n        });\n        map.on('move', () => {\n          this.setState({\n          lng: map.getCenter().lng.toFixed(4),\n          lat: map.getCenter().lat.toFixed(4),\n          zoom: map.getZoom().toFixed(2)\n          });\n          });\n          console.log(this.state)\n    }\n\n    componentDidMount() {\n      this.getMap();\n      this.getCityInfo();\n    }\n\n    showFullScreen = () => {\n      this.mapContainer.classList.toggle(\"fullScreen\");\n      this.getMap();\n    }\n\n    getCoordinates = (zipCode) => {\n      fetch(`https://cors-anywhere.herokuapp.com/https://www.zipcodeapi.com/rest/${process.env.REACT_APP_ZIPCODE_API}/info.json/${zipCode}/degrees`, {\n        method: 'GET',\n        headers:{\n          'X-Requested-With': 'XMLHttpRequest'\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          city: data.city,\n          state: data.state,\n          lat: data.lat,\n          lng: data.lng\n        }, () => {\n          this.getMap();\n        })\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n    }\n\n    getCityInfo = () => {\n      fetch(`http://en.wikipedia.org/w/api.php?action=query&list=search&srsearch=Seattle&format=json`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n      })\n      .catch(err => console.log(err))\n    }\n\n    render() {\n        return (\n          <div className=\"grid\">\n            <FormComponent \n              getCoordinates={this.getCoordinates}\n            />\n            <div className=\"mapContainer\" ref={el => this.mapContainer = el}>\n            <FontAwesomeIcon icon={faExpand} onClick={this.showFullScreen} className=\"icon\"/>\n            </div>\n              \n          </div>\n        );\n\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}