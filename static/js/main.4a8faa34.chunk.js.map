{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","width","FormComponent","props","classes","useState","zipCode","setZipCode","className","city","state","onSubmit","e","preventDefault","console","log","getCoordinates","autoComplete","TextField","id","label","type","value","onChange","target","InputLabelProps","shrink","variant","Button","color","mapboxgl","accessToken","process","App","getMap","map","Map","container","mapContainer","style","center","lng","lat","zoom","on","setState","getCenter","toFixed","getZoom","showFullScreen","classList","toggle","fetch","method","headers","then","response","json","data","getCityInfo","catch","error","res","searchInfo","query","search","err","this","html","__html","length","filter","i","item","dangerouslySetInnerHTML","createMarkup","snippet","ref","el","icon","faExpand","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4a8faa34.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\n\r\nexport default function FormComponent(props) {\r\n    const classes = useStyles();\r\n    const [zipCode, setZipCode] = useState(\"\");\r\n    \r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        console.log(zipCode)\r\n        props.getCoordinates(zipCode)\r\n    }\r\n\r\n  return (\r\n      <div className=\"formContainer\">\r\n        <div className=\"container\">\r\n            <h2>YOU ARE IN</h2>\r\n            <h1>{props.city}, {props.state}</h1>\r\n            <form \r\n                onSubmit={submitForm}\r\n                className={classes.root} \r\n                autoComplete=\"off\">\r\n                <TextField \r\n                id=\"outlined-number\"\r\n                label=\"Zip Code\"\r\n                type=\"zipcode\"\r\n                value={zipCode}\r\n                onChange={e => setZipCode(e.target.value)}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n                />\r\n                <div id=\"buttonHolder\">\r\n                    <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\r\n                        Find on Map\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n      </div>\r\n  );\r\n}","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport FormComponent from './components/Form';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExpand } from '@fortawesome/free-solid-svg-icons'\nimport './App.scss';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_KEY;\n\n\nexport default class App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        lng: -122.34, \n        lat: 47.61,\n        zoom: 10,\n        city: 'Seattle',\n        state: 'WA',\n        searchInfo: []\n      }\n    }\n\n    getMap = () => {\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n        });\n        map.on('move', () => {\n          this.setState({\n          lng: map.getCenter().lng.toFixed(4),\n          lat: map.getCenter().lat.toFixed(4),\n          zoom: map.getZoom().toFixed(2)\n          });\n          });\n          console.log(this.state)\n    }\n\n    componentDidMount() {\n      this.getMap();\n      this.getCityInfo();\n    }\n\n    showFullScreen = () => {\n      this.mapContainer.classList.toggle(\"fullScreen\");\n      this.getMap();\n    }\n\n    createMarkup(html) {\n      return {__html: html};\n    }\n\n    getCoordinates = (zipCode) => {\n      fetch(`https://cors-anywhere.herokuapp.com/https://www.zipcodeapi.com/rest/${process.env.REACT_APP_ZIPCODE_API}/info.json/${zipCode}/degrees`, {\n        method: 'GET',\n        headers:{\n          'X-Requested-With': 'XMLHttpRequest'\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          city: data.city,\n          state: data.state,\n          lat: data.lat,\n          lng: data.lng\n        }, () => {\n          this.getMap();\n          this.getCityInfo();\n        })\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n    }\n\n    getCityInfo = () => {\n      fetch(`https://cors-anywhere.herokuapp.com/http://en.wikipedia.org/w/api.php?action=query&list=search&srsearch=${this.state.city}&format=json`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        this.setState({ searchInfo: data.query.search})\n      })\n      .catch(err => console.log(err))\n    }\n\n    render() {\n        return (\n          <div className=\"grid\">\n            <div className=\"grid-inside\">\n              <FormComponent \n                city={this.state.city}\n                state={this.state.state}\n                getCoordinates={this.getCoordinates}\n              />\n              <div>\n                {this.state.searchInfo.length > 0 ? this.state.searchInfo.filter((query, i) => (i <= 2)).map(item => {\n                  return (\n                    <div className=\"article\" dangerouslySetInnerHTML={this.createMarkup(item.snippet)} />\n                  )\n                }) : null}\n              </div>\n            </div>\n            <div className=\"mapContainer\" ref={el => this.mapContainer = el}>\n            <FontAwesomeIcon icon={faExpand} onClick={this.showFullScreen} className=\"icon\"/>\n            </div>\n              \n          </div>\n        );\n\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}